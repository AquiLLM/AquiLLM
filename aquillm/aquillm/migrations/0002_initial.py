# Generated by Django 5.0.6 on 2024-07-05 04:46

import django.contrib.postgres.fields
import django.db.models.deletion
import pgvector.django.vector
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("aquillm", "0001_initial"),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="PDFDocument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("full_text", models.CharField()),
                ("pdf_file", models.FileField(upload_to="pdfs/")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="STTDocument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("full_text", models.CharField()),
                ("audio_file", models.FileField(upload_to="stt_audio/")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TeXDocument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("full_text", models.CharField()),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TextChunk",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("content", models.TextField()),
                ("start_position", models.PositiveIntegerField()),
                ("end_position", models.PositiveIntegerField()),
                ("object_id", models.PositiveIntegerField()),
                (
                    "keywords",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=100),
                        blank=True,
                        null=True,
                        size=10,
                    ),
                ),
                ("embedding", pgvector.django.vector.VectorField(dimensions=1024)),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=[
                            "content_type",
                            "object_id",
                            "start_position",
                            "end_position",
                        ],
                        name="aquillm_tex_content_1de726_idx",
                    )
                ],
            },
        ),
        migrations.AddConstraint(
            model_name="textchunk",
            constraint=models.UniqueConstraint(
                fields=("content_type", "object_id", "start_position", "end_position"),
                name="unique_chunk_position_per_document",
            ),
        ),
    ]
